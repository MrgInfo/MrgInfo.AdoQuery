# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema

variables:
  major: 1
  minor: 2
  patch: $[counter(variables['minor'], 0)]
  packageVersion: $(major).$(minor).$(patch)
  buildImages: true

name: $(Build.DefinitionName)-$(Date:yyyyMMdd)-$(Rev:rr)

resources:
  containers:

  - container: ora
    image: mrginfocontainerregistry.azurecr.io/ado-query/ora
    endpoint: AzureContainers
    options: --name ora
    ports:
    - '1521:1521'

  - container: sql
    image: mrginfocontainerregistry.azurecr.io/ado-query/sql
    endpoint: AzureContainers
    options: --name sql
    ports:
    - '1433:1433'

trigger:
- master

jobs:

- job: images
  displayName: Build Docker images
  condition: 'and(always(), eq(variables.buildImages, true))'
  pool:
    vmImage: ubuntu-latest
  steps:
  - task: Docker@2
    displayName: Login to ACR
    inputs:
      command: login
      containerRegistry: AzureContainers
  - task: Docker@2
    displayName: Login to Docker Hub
    inputs:
      command: login
      containerRegistry: DockerHub
  - task: Docker@2
    displayName: Build Oracle images
    inputs:
      command: buildAndPush
      containerRegistry: AzureContainers
      repository: ado-query/ora
      Dockerfile: '**/MrgInfo.AdoQuery.Oracle/Dockerfile'
      tags: |
          $(Build.BuildId)
          latest
  - task: Docker@2
    displayName: Build SQL images
    inputs:
      command: buildAndPush
      containerRegistry: AzureContainers
      repository: ado-query/sql
      Dockerfile: '**/MrgInfo.AdoQuery.Sql/Dockerfile'
      tags: |
          $(Build.BuildId)
          latest

- job: packages
  displayName: Build and test NuGet packages
  dependsOn: images
  condition: always()
  pool:
    vmImage: ubuntu-latest
  workspace:
    clean: all
  services:
    ora: ora
    sql: sql
  steps:
  - bash: |
      sleep 10m
      docker exec ora cat /home/oracle/dba/database.log
      docker exec sql cat /root/dba/database.log
    displayName: Wait for database servers to boot
  - task: UseDotNet@2
    displayName: Install .NET Core SDK
    inputs:
      version: 3.0.x
      performMultiLevelLookup: true
  - task: DotNetCoreCLI@2
    displayName: Run unit tests
    inputs:
      command: test
      projects: '**/*.Test.csproj'
    env:
      COREHOST_TRACE: 0
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
  - task: DotNetCoreCLI@2
    displayName: Create package
    inputs:
      command: pack
      packagesToPack: '**/*.csproj;!**/*.Test.csproj;!**/*.App.csproj'
      versioningScheme: byEnvVar
      includesymbols: true
      versionEnvVar: packageVersion
  - task: NuGetCommand@2
    displayName: Push to nuget.org
    inputs:
      command: push
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: external
      publishFeedCredentials: NuGet
